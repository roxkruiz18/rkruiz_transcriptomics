## The following code is the analysis for Figures 6 and 7
## Datasets were obtained through the permission of Dr. David Tuveson, published by Elyada et al. 
## The majority of the code follows the Seurat PBMC vignette
## GSEA analysis was done using the 'Escape' package
## cell-cell communication inference follows the 'CellChat' package

wd <- getwd()
  wd  
  # Set Up
  ## Library
  #```{r}
  

library(Seurat)
library(dplyr)
library(ggplot2)
library(UCell)
#```


# Read in and format data
#```{r}
library(data.table)
# Read in scRNAseq data
Elyada.data <- read.csv("C:/human_combined_expression.csv", header = TRUE)
# Read in table for Ensembl  name to symbol name
gene_symbol <- read.table("C:/human_combined_matrix_files/genes.tsv")

# Select out only ductal cells
Non_adjacent <- !grepl("9|7", colnames(Elyada.data))
tumor_only <- Elyada.data[,Non_adjacent]

# Merge table to have ductal scRNAseq data with gene symbol names
genes <- rename(gene_symbol, "X" = "V1")
genes <- rename(genes, "gene" = "V2")
All.genes <- merge(tumor_only, genes, by = "X")
All.genes <- as.data.frame(All.genes)


# Clean up data

duplicate_genes <- All.genes[duplicated(All.genes$gene),]
All.genes <- All.genes[-c(14177,14178,14711,15697,15756),]
row.names(All.genes) <- All.genes$gene
All.genes <- subset(All.genes, select = -X)
All.genes <- subset(All.genes, select = -gene)
#```
#```{r}
#Add in cell annotations
barcodes <- read.csv("C:/human_combined_tsne_annotation.csv")

cell_annot <- barcodes[,-c(2,3,4,5)]

t.all.genes <- as.data.frame(t(All.genes))

#```

#```{r}
# create Seurat Object
sdata <- CreateSeuratObject(counts = All.genes, project = "Elyada", min.cells = 0, min.features = 200)
#```
#Warning: Feature names cannot have underscores ('_'), replacing with dashes ('-')
#Warning: Data is of class data.frame. Coercing to dgCMatrix.


#```{r}
t.all.genes$cell <- rownames(t.all.genes)
t.all.genes$cell <- trimws(t.all.genes$cell)

cell_annot <- as.data.frame(cell_annot)

cell_annot <- rename(cell_annot, "cell" = "X")
cell_annot$cell <- trimws(cell_annot$cell)
cell_annot$cell <- gsub('-','.',cell_annot$cell)
rownames(cell_annot) <- cell_annot$cell

#merge
annotated.exp <- merge(t.all.genes,cell_annot, by = "cell")


#Add original cluster IDs as metadata
#```{r}
sdata <- AddMetaData(object = sdata, metadata = cell_annot)


#```
#normalize the data as normal
#```{r}
sdata <- NormalizeData(sdata)

all.genes <- rownames(sdata)
sdata <- ScaleData(sdata, features = all.genes)

# Find variable features
sdata <- FindVariableFeatures(sdata, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(sdata), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sdata)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
#```
#Check to make sure the data looks good with clusters
#```{r}
sdata <- RunPCA(sdata, features = VariableFeatures(object = sdata))

VizDimLoadings(sdata, dims = 1:2, reduction = "pca")
#```
#```{r}
ElbowPlot(sdata)
#```
#```{r}
DimHeatmap(sdata, dims = 1:2, cells = 500, balanced = TRUE)
#```
#```{r}
#```{r}

# clustering
sdata <- FindNeighbors(sdata, dims = 1:15)
sdata <- FindClusters(sdata, resolution = 0.5)

# running non-linear dimensional reduction
sdata <- RunUMAP(sdata, dims = 1:15)
#```
#```{r}
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(sdata, reduction = "umap", group.by = "cluster_name")
#Error in `[.data.frame`(data, , group) : undefined columns selected
#In addition: Warning message:
  #The following requested variables were not found: cluster_name 


#```
#```{r}
#Looks good so we can save the file
#saveRDS
saveRDS(sdata, file = "C:/Elyada_seurat_object_combined.rds")

sdata <- readRDS("C:/Elyada_seurat_object_combined.rds")
#Load in seurat data
#```{r}
sdata <- readRDS("C:/Elyada_seurat_object_combined.rds")
Idents(object = sdata) <- sdata@meta.data$cluster_name

####----------------- 
##Figure 1
#Checking plectin expression across all ductal cells
#```{r}
library(data.table)


annotated.exp <- as.data.frame(annotated.exp)
head(annotated.exp)
tail(annotated.exp)
#```
#```{r}
ductalonly <- filter(annotated.exp, cluster_name %in% c("Ductal cells 1", "Ductal cells 2", "Ductal cells 3"))

PLEC <- ggstatsplot::ggbetweenstats(
  data = ductalonly,
  x = cluster_name,
  y = PLEC,
  xlab = "Ductal Cluster",
  messages = FALSE,
  type = "nonparametric",
  title = "PLEC Counts between Ductal Cell Clusters",
  ggtheme = ggplot2::theme_classic(),
  package = "ggsci",
  palette = "nrc_npg"
)
PLEC    

Figure.7A <- PLEC + theme(plot.title = element_text(size=14)) +
  theme(plot.title = element_text(hjust=0.5))+
  theme(plot.title=element_text(face="bold")) +
  theme(axis.text = element_text(size = 10, face = "bold")) +
  theme(axis.title = element_text(size = 12, face = "bold")) 

Figure.7A
#save plot
ggsave("Figure.7A", plot = Figure.7A, width = 2, height = 3, units = "cm", device = "png", dpi = 1200, scale = 5)

####---------------------GSEA using ESCAPE package

sdata <- RenameIdents(object = sdata, `Ductal cells 1` = "plec-High")

sdata <- RenameIdents(object = sdata, `Ductal cells 2` = "plec-Low")

sdata <- RenameIdents(object = sdata, `Ductal cells 3` = "plec-Low")

#```

sce.ductal <- as.SingleCellExperiment(sdata, assay = "RNA")
ductal <- subset(x = sdata, idents = c("PLEC-low Ductal cells", "PLEC-high Ductal cells"))
ductal[["RNA"]] <- as(object = ductal[["RNA"]], Class = "Assay")


#install.packages("escape", version = "1.6.0", repos = "http://cran.us.r-project.org")

GS.hallmark <- getGeneSets(library = "H")
GS.reactome <- getGeneSets(library = "C2", subcategory = "REACTOME")

#This code is a little wonky - on one install the function was enrichIt() - double check 
#which one is correct to use based on the version of escape

ductal.gsea <- runEscape(ductal, 
                        method = "UCell",
                        gene.sets = GS.Reactome, 
                        groups = 1000, 
                        min.size = 5,
                        new.assay.name = "escape.Reactome")
                    

ductal.gsea <- runEscape(ductal, 
                        method = "UCell",
                        gene.sets = GS.Biocarta, 
                        groups = 1000, 
                        min.size = 5,
                        new.assay.name = "escape.Biocarta")

saveRDS(ductal.gsea, file = "C:/ductal_cell_seurat_escape_analysis.rds")

### visualization of genesets with a LFC of +/- 2

subset_features <- c("REACTOME-SIGNALING-BY-NTRK3-TRKC", "REACTOME-SHC1-EVENTS-IN-ERBB2-SIGNALING", "REACTOME-SIGNALING-BY-NTRK2-TRKB", "REACTOME-CHYLOMICRON-REMODELING", "REACTOME-ANCHORING-FIBRIL-FORMATION", "REACTOME-TYPE-I-HEMIDESMOSOME-ASSEMBLY",
                     "REACTOME-ROLE-OF-PHOSPHOLIPIDS-IN-PHAGOCYTOSIS",  "REACTOME-BETA-DEFENSINS", "REACTOME-INWARDLY-RECTIFYING-K-CHANNELS", "REACTOME-INTRINSIC-PATHWAY-OF-FIBRIN-CLOT-FORMATION",
                     "REACTOME-ACTIVATION-OF-C3-AND-C5", "REACTOME-CREATION-OF-C4-AND-C2-ACTIVATORS", "BIOCARTA-EFP-PATHWAY", "BIOCARTA-CDC25-PATHWAY", "BIOCARTA-TCRA-PATHWAY", "BIOCARTA-CLASSIC-PATHWAY", "BIOCARTA-IL5-PATHWAY",
                     "BIOCARTA-ALTERNATIVE-PATHWAY")

all_subset_features <- heatmapEnrichment(ductal.gsea, 
                                     group.by = "ident",
                                     assay = "subset_features",
                                     scale = FALSE)

all_subset_features


all_subset_features + scale_fill_distiller(palette = "RdYlBu") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.text.x = element_text(size = 12, color = "black"))+
  theme(axis.text.y = element_text(size = 10, color = "black"))+
  theme(legend.position="right", legend.direction = "vertical")

Figure.7B <- all_subset_features
#save plot
ggsave("Figure.7B", plot = Figure.7B, device = "png")



######------------------------Cell Chat analysis
###----------- CellChat Analysis

#if (!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")

#BiocManager::install("ComplexHeatmap")

# download CellChat
#devtools::install_github("jinworks/CellChat")
library("CellChat")



#Extract the data for cellchat analysis
#```{r}


sdata <- RenameIdents(object = sdata, `T and NK cells` = "T & NK cells")

# For Seurat version >= “5.0.0”, get the normalized data via `seurat_object[["RNA"]]$data`
data.input = sdata[["RNA"]]$data

# create labels
labels <- Idents(sdata)

# create dataframe of the cell labels
meta <- data.frame(labels = labels, row.names = names(labels)) 

#```

cellchat <- createCellChat(object = data.input, meta = meta, group.by = "labels")

#> [1] "Create a CellChat object from a data matrix"
#> Set cell identities for the new CellChat object 
#> The cell groups used for CellChat analysis are  APOE+ FIB, FBN1+ FIB, COL11A1+ FIB, Inflam. FIB, cDC1, cDC2, LC, Inflam. DC, TC, Inflam. TC, CD40LG+ TC, NKT
#```
#```{r}
CellChatDB <- CellChatDB.human # use CellChatDB.mouse if running on mouse data
showDatabaseCategory(CellChatDB)
#```
#```{r}
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)

# use a subset of CellChatDB for cell-cell communication analysis
#CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling", key = "annotation") # use Secreted Signaling

# Only uses the Secreted Signaling from CellChatDB v1
#  CellChatDB.use <- subsetDB(CellChatDB, search = list(c("Secreted Signaling"), c("CellChatDB v1")), key = c("annotation", "version"))

# use all CellChatDB except for "Non-protein Signaling" for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB, search = c("Secreted Signaling", "ECM-Receptor", "Cell-Cell Contact"), key = "annotation")


#use all CellChatDB for cell-cell communication analysis
#CellChatDB.use <- CellChatDB # simply use the default CellChatDB. We do not suggest to use it in this way because CellChatDB v2 includes "Non-protein Signaling" (i.e., metabolic and synaptic signaling). 

# set the used database in the object
cellchat@DB <- CellChatDB.use
#```
#```{r}
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
#> The number of highly variable ligand-receptor pairs used for signaling inference is 1248

#> [1] 13.20763
# project gene expression data onto PPI (Optional: when running it, USER should set `raw.use = FALSE` in the function `computeCommunProb()` in order to use the projected data)
# cellchat <- projectData(cellchat, PPI.human)
#```
#```{r}
ptm = Sys.time()
options(future.globals.maxSize = 635 * 1024^2)
cellchat <- computeCommunProb(cellchat, type = "triMean")
#```


#```{r}
cellchat <- filterCommunication(cellchat, min.cells = 10)
#The cell-cell communication related with the following cell groups are excluded due to the few number of cells:  RBCs ! 	6.8% interactions are removed!

cellchat <- computeCommunProbPathway(cellchat)

cellchat <- aggregateNet(cellchat)
#```

#```{r}
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T,  label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
#```
#```{r}

## plec-High and plec-Low as Senders
n <- netVisual_bubble(cellchat, sources.use = c(1,2), targets.use = c(3,5), signaling = c("ANNEXIN", "LAMININ", "VTN", "FN1", "GALECTIN", "APP", "SPP1", "MHC-I", "MHC-II"), remove.isolate = FALSE, thresh = 1)
Figure.6C <- n
Figure.6C + theme(
  axis.text.x = element_text(size = 10, face = "bold", colour = c(rep("orange", 2), rep("steelblue1", 2)))
)
Figure.6C 
#save plot
ggsave("Figure.6C", plot = Figure.6C, device = "png")


## plec-High and plec-Low as Receivers
h <- netVisual_bubble(cellchat, sources.use = c(5), targets.use = c(1,2), signaling = c("ANNEXIN", "LAMININ", "VTN", "FN1", "GALECTIN", "APP", "SPP1", "CEACAM", "CD6", "MHC-I", "MHC-II"), remove.isolate = FALSE, thresh = 1)
Figure.6D <- h
Figure.6D + theme(
  axis.text.x = element_text(size = 10, face = "bold", colour = c(rep("dodgerblue2", 2)))
)

Figure.6D
#save plot
ggsave("Figure.6D", plot = Figure.6D, device = "png")


saveRDS(cellchat, file = "C:/Elyada_cellchat_object_updated3.rds")


#####get laminin-332 violin plots
features_lam_itg <- c("LAMA3", "LAMB3", "LAMC2")

# Generate individual violin plots with adjusted axis title sizes
plots <- lapply(features_lam_itg, function(features_lam_itg) {
  VlnPlot(sdata, features = features_lam_itg, 
          cols = c('steelblue1', 'orange'), fill.by = "ident") +
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_text(size = 10),
      axis.text.x = element_text(size=10),
      axis.text.y = element_text(size=9),
      title = element_text(size=12, face = "bold"),
      legend.position = "none"
    )
})
plots[[3]]
features_lam_itg <- CombinePlots(plots = plots)
features_lam_itg

# Print or save the combined plot
print(combined_plots)



######get Fibronectin violin plots for Myeloid/Macrophages and Fibroblasts

sdata.2 <- subset(x = sdata, idents = c("Myeloid & Macrophages", "Fibroblasts"))
features_mac_FN <- c("FN1")

# Generate individual violin plots with adjusted axis title sizes
plots <- lapply(features_mac_FN, function(features_mac_FN) {
  VlnPlot(sdata1.2, features = features_mac_FN, 
          cols = c('dodgerblue3', 'goldenrod2'), fill.by = "ident") +
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_text(size = 12, face = "bold"),
      axis.text.x = element_text(size=12),
      axis.text.y = element_text(size=12),
      title = element_text(size=18, face = "bold"),
      legend.position = "none"
    )
})
plots[[1]]

# Print or save the combined plot
print(combined_plots)


