####This is a continuation of Figure 6

#### Figure.S5
### Looking at PLEC count distributions across each Ductal cell subtypes
### this is showing the distribution for PLEC counts in Ductal 1 cells. Repeat this for Ductal 2 and 3 cells

ductal1only <- filter(annotated.exp, cluster_name %in% c("Ductal cells 1"))
ductal2only <- filter(annotated.exp, cluster_name %in% c("Ductal cells 2"))
ductal3only <- filter(annotated.exp, cluster_name %in% c("Ductal cells 3"))


plectin_counts <- ductal1_only_genes %>% select("cell", "PLEC")# Replace "Plectin" with the correct gene name if needed
plectin_counts <- as.numeric(plectin_counts)  

# Plot the distribution using ggplot2
sup.Fig.5 <- ggplot(plectin_counts, aes(x = PLEC)) +
  geom_histogram(bins = 30, fill = "orange", color = "black") +  # Adjust bins as needed
  geom_density(alpha = 0.2, fill = "orangered3") +  # Adds a density curve
  labs(title = "Distribution of Plectin Counts in 'Ductal 1 cells'", 
       x = "Plectin Counts", 
       y = "Number of Cells") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 10, face = "bold", color = "black"),  # Customize x-axis title
    axis.title.y = element_text(size = 10, face = "bold", color = "black"),   # Customize y-axis title
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(size = 12, face = "bold", color = "black")
  )

sup.Fig.5A 

#save plot
ggsave("sup.Fig.5A.png", plot = sup.Fig.5, width = 3.75, height = 2, units = "cm", device = "png", dpi = 1200, scale = 3)

### now for Ductal 2 cells

plectin2_counts <- ductal2only %>% select("cell", "PLEC")# Replace "Plectin" with the correct gene name if needed
plectin2_counts <- as.numeric(plectin2_counts)  

sup.Fig.5B <- ggplot(plectin2_counts, aes(x = PLEC)) +
  geom_histogram(bins = 30, fill = "seagreen", color = "black") +  # Adjust bins as needed
  geom_density(alpha = 0.2, fill = "seagreen") +  # Adds a density curve
  labs(title = "Distribution of Plectin Counts in 'Ductal 3 cells'", 
       x = "Plectin Counts", 
       y = "Number of Cells") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 10, face = "bold", color = "black"),  # Customize x-axis title
    axis.title.y = element_text(size = 10, face = "bold", color = "black"),   # Customize y-axis title
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(size = 12, face = "bold", color = "black")
  )

sup.Fig.5B

#save plot
ggsave("sup.Fig.5B.png", plot = sup.Fig.5B, width = 3.75, height = 2, units = "cm", device = "png", dpi = 1200, scale = 3)


###now for Ductal 3 cells

plectin3_counts <- ductal3only %>% select("cell", "PLEC")# Replace "Plectin" with the correct gene name if needed
plectin3_counts <- as.numeric(plectin3_counts)  

sup.Fig.5C <- ggplot(plectin3_counts, aes(x = PLEC)) +
  geom_histogram(bins = 30, fill = "steelblue1", color = "black") +  # Adjust bins as needed
  geom_density(alpha = 0.2, fill = "darkblue") +  # Adds a density curve
  labs(title = "Distribution of Plectin Counts in 'Ductal 3 cells'", 
       x = "Plectin Counts", 
       y = "Number of Cells") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 10, face = "bold", color = "black"),  # Customize x-axis title
    axis.title.y = element_text(size = 10, face = "bold", color = "black"),   # Customize y-axis title
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(size = 12, face = "bold", color = "black")
  )

sup.Fig.5C

#save plot
ggsave("sup.Fig.5C.png", plot = sup.Fig.5C, width = 3.75, height = 2, units = "cm", device = "png", dpi = 1200, scale = 3)


###--------------------------Ductal 1 cells high and low-------------------------------###

## take cells with zero PLEc counts and make them 'Low'
##take cells with > 0 PLEC counts and make them 'High'

sum(ductal1_only_genes$PLEC >= 1)
#198
sum(ductal1_only_genes$PLEC <= 1)
#704
sum(ductal1_only_genes$PLEC == 0)

plectin_counts <- ductal1_only_genes$PLEC
plectin_counts1 <- plectin_counts
plectin_counts1$new_cluster <- ifelse(plectin_counts1$PLEC == 0, "Ductal1-Low", "Ductal1-High")
plectin_counts1$PLEC <- NULL

new_barcodes1 <- barcodes

new_barcodes1$X <- gsub("-", ".", new_barcodes1$X)

new_barcodes1 <-  rename(new_barcodes1, "cell" = "X")

new_barcodes1 <- left_join(new_barcodes1, plectin_counts1, by = "cell")

new_barcodes1 <- new_barcodes1 %>% mutate(cluster_name = ifelse(is.na(new_cluster), cluster_name, as.character(new_cluster)))



new_barcodes2 <- new_barcodes1
new_barcodes3 <- new_barcodes2 %>% mutate(dbCluster = case_when(
  cluster_name =="Ductal1-High" ~ 16,
  cluster_name =="Ductal1-Low" ~ 17,
  TRUE ~ dbCluster
))

new_barcodes3$new_cluster <- NULL
# need to make Seurat object with new barcodes and cell annotations


new_cell_annot2 <-new_barcodes3[,-c(2,3,4,5)] 
rownames(new_cell_annot2) <- new_cell_annot2[,1]
#new_barcodes5$X <- NULL



# Add cell annotations to the Seurat object 

sdata.1 <- CreateSeuratObject(counts = All.genes, project = "Elyada", min.cells = 0, min.features = 200)
sdata.1 <- AddMetaData(sdata.1, metadata = new_cell_annot2)

sdata.1 <- NormalizeData(sdata.1)

all.1.genes <- rownames(sdata.1)
sdata.1 <- ScaleData(sdata.1, features = all.1.genes)

# Find variable features
sdata.1 <- FindVariableFeatures(sdata.1, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10.1 <- head(VariableFeatures(sdata.1), 10)

# plot variable features with and without labels
plot1.1 <- VariableFeaturePlot(sdata.1)
plot2.1  <- LabelPoints(plot = plot1.1, points = top10.1, repel = TRUE)
plot1.1  + plot2.1
#```
#Check to make sure the data looks good with clusters
#```{r}
sdata.1 <- RunPCA(sdata.1, features = VariableFeatures(object = sdata.1))

VizDimLoadings(sdata.1, dims = 1:2, reduction = "pca")
#```
#```{r}
ElbowPlot(sdata.1)
#```
#```{r}
DimHeatmap(sdata.1, dims = 1:2, cells = 500, balanced = TRUE)
#```
#```{r}
#```{r}

# clustering
sdata.1 <- FindNeighbors(sdata.1, dims = 1:15)
sdata.1<- FindClusters(sdata.1, resolution = 0.5)

# running non-linear dimensional reduction
sdata.1 <- RunUMAP(sdata.1, dims = 1:17)
#```
#```{r}
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(sdata.1, reduction = "umap", group.by = "cluster_name")
#```
#```{r}
#Looks good so we can save the file


saveRDS(sdata.1, file = "C:/sdata.1_RR.rds")
Idents(object = sdata.1) <- sdata.1@meta.data$cluster_name







###--------------------cellchat analysis on Ductal1 High and Low -----------------------###

sdata.1 <- RenameIdents(object = sdata.1, `Ductal1-High` = "Ductal1-High")
sdata.1 <- RenameIdents(object = sdata.1, `Ductal1-Low` = "Ductal1-Low")
sdata.1 <- RenameIdents(object = sdata.1, `T and NK cells` = "T & NK cells")



# For Seurat version >= “5.0.0”, get the normalized data via `seurat_object[["RNA"]]$data`
data.1.input = sdata.1[["RNA"]]$data


labels.1<- Idents(sdata.1)

meta.1 <- data.frame(labels = labels.1, row.names = names(labels.1)) # create a dataframe of the cell labels
#```
#CellChat
#```{r}

#if (!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")

#BiocManager::install("ComplexHeatmap")

# download CellChat
#devtools::install_github("jinworks/CellChat")
library("CellChat")

cellchat.1 <- createCellChat(object = data.1.input, meta = meta.1, group.by = "labels")
#> [1] "Create a CellChat object from a data matrix"
#> Set cell identities for the new CellChat object 
#> The cell groups used for CellChat analysis are  APOE+ FIB, FBN1+ FIB, COL11A1+ FIB, Inflam. FIB, cDC1, cDC2, LC, Inflam. DC, TC, Inflam. TC, CD40LG+ TC, NKT
#```
#```{r}
CellChatDB <- CellChatDB.human # use CellChatDB.mouse if running on mouse data
showDatabaseCategory(CellChatDB)
#```
#```{r}
# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)


# use a subset of CellChatDB for cell-cell communication analysis
#CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling", key = "annotation") # use Secreted Signaling

# Only uses the Secreted Signaling from CellChatDB v1
#  CellChatDB.use <- subsetDB(CellChatDB, search = list(c("Secreted Signaling"), c("CellChatDB v1")), key = c("annotation", "version"))

# use all CellChatDB except for "Non-protein Signaling" for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB)


#use all CellChatDB for cell-cell communication analysis
#CellChatDB.use <- CellChatDB # simply use the default CellChatDB. We do not suggest to use it in this way because CellChatDB v2 includes "Non-protein Signaling" (i.e., metabolic and synaptic signaling). 

# set the used database in the object
cellchat.1@DB <- CellChatDB.use
#```
#```{r}
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat.1) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) # do parallel
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
#> The number of highly variable ligand-receptor pairs used for signaling inference is 1248

#> [1] 13.20763
# project gene expression data onto PPI (Optional: when running it, USER should set `raw.use = FALSE` in the function `computeCommunProb()` in order to use the projected data)
# cellchat <- projectData(cellchat, PPI.human)
#```
#```{r}
ptm = Sys.time()
options(future.globals.maxSize = 635 * 1024^2)
cellchat <- computeCommunProb(cellchat, type = "triMean")
#```


#```{r}
cellchat <- filterCommunication(cellchat, min.cells = 10)
#The cell-cell communication related with the following cell groups are excluded due to the few number of cells:  RBCs ! 	6.8% interactions are removed!

cellchat <- computeCommunProbPathway(cellchat)

cellchat <- aggregateNet(cellchat)
#```

#```{r}
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T,  label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
#```
#```{Low
#2 = High
#4 = T/NK cells
#5 = Myeloid/Mac
n <- netVisual_bubble(cellchat, sources.use = c(1,2), targets.use = c(4,5), remove.isolate = FALSE, thresh = 1)
n
n <- Figure.7A
Figure.7A + theme(
  axis.text.x = element_text(size = 10, face = "bold", colour = c(rep("steelblue1", 2), rep("orange", 2)))
)

n <- netVisual_bubble(cellchat, sources.use = c(4,5), targets.use = c(1,2), remove.isolate = FALSE, thresh = 1)
n <- Figure.7B
Figure.7B + theme(
  axis.text.x = element_text(size = 10, face = "bold", colour = c(rep("steelblue1", 2), rep("orange", 2)))
)




####get Laminin and Integrin Violin Plots
sdata1.1 <- subset(x = sdata.1, idents = c("Ductal1-Low", "Ductal1-High"))

features_lam_itg <- c("LAMA3", "LAMB3", "LAMC2", "ITGA3", "ITGAV", "ITGB1", "ITGB5", "ITGB6", "ITGB8")


# Generate individual violin plots with adjusted axis title sizes
plots <- lapply(features_lam_itg, function(features_lam_itg) {
  VlnPlot(sdata1.1, features = features_lam_itg, 
          cols = c('orange', 'steelblue1'), fill.by = "ident") +
    theme(
      axis.title.x = element_blank(),
      axis.title.y = element_text(size = 10),
      axis.text.x = element_text(size=10),
      axis.text.y = element_text(size=9),
      title = element_text(size=12, face = "bold"),
      legend.position = "none"
    )
})
plots[[2]]
features_lam_itg <- CombinePlots(plots = plots)
features_lam_itg

# Print or save the combined plot
print(combined_plots)
